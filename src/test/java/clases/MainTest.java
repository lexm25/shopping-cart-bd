/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package clases;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer.MethodName;

import com.thoughtworks.qdox.JavaDocBuilder;
import com.thoughtworks.qdox.model.JavaSource;

import presentacion.Main;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;

/**
 * Esta clase esta preparada para testear el programa main principal de un proyecto
 * interceptando y suplantando tando la entrada como la salida estandar teclado
 * y pantalla
 * @author eserrano
 *
 */
@TestMethodOrder(MethodName.class)
class MainTest {
	
	private final PrintStream standardOut = System.out;
	private final InputStream standardIn = System.in;
	private final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream();
	
	@BeforeEach
	void setUp() {
	    System.setOut(new PrintStream(outputStreamCaptor));
	}
	
	@Test
	@DisplayName("Compilación")
	/**
	 * Compila y se pueden establecer reglas basicas,
	 * Por ejemplo impedir la importación de ciertas clases 
	 */
	void test00RequisitosBasicos() {
		assertTrue(true);
	}
	
	@Test
	@DisplayName("Hola Mundo")
	/**
	 * toString
	 */
	void test01() {
		//InputStream salida = new ByteArrayInputStream(outputStreamCaptor.toByteArray());
		//Scanner lectorSalida = new Scanner(salida);
		Main.main(null);
		assertEquals("Hola Mundo", outputStreamCaptor.toString().trim()/*lectorSalida.nextLine()*/);
		//lectorSalida.close();
	}
	
	void setIn(String entrada) {
		System.setIn(new ByteArrayInputStream(entrada.getBytes()));
	}

	@AfterEach
	void tearDown() {
		System.setOut(standardOut);
		System.setIn(standardIn);
	}
	
//	void prohibidoArrays() {
//		String fileFullPath = "src/main/java/ud05arrays/Ud5Ejercicio1.java";
//		compruebaProhibido(fileFullPath, "Arrays");
//	}
	
	void compruebaProhibido(String classFullPath, String classForbidden) {
		JavaDocBuilder builder = new JavaDocBuilder();
		try {
			builder.addSource(new FileReader(classFullPath));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			assertTrue(false);
		}

		JavaSource src = builder.getSources()[0];
		String[] imports = src.getImports();

		for (String imp : imports) {
			if (imp.endsWith("." + classForbidden)) {
				print("Prohibido importar " + classForbidden + " en la clase " + classFullPath);
				assertTrue(false);
			}
			if (imp.endsWith(".*")) {
				print("Prohibido importar con .*" + " en la clase " + classFullPath);
				assertTrue(false);
			}
		}

		String sc = src.getCodeBlock();

		Pattern pattern = Pattern.compile(classForbidden + "\\.");
		Matcher matcher = pattern.matcher(sc);
		if (matcher.find()) {
			print("Prohibido referenciar " + classForbidden + " en la clase " + classFullPath);
			assertTrue(false);
		}
	}
	
	void print(Object message) {
		this.standardOut.println(message);
	}
	

}